// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProvaTp3Teste.Model;

#nullable disable

namespace ProvaTp3Teste.Migrations
{
    [DbContext(typeof(AgendamentoDbContext))]
    [Migration("20241206113803_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProvaTp3Teste.Model.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("bit");

                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SalaId");

                    b.ToTable("Agendamentos");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Andar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlocoId")
                        .HasColumnType("int");

                    b.Property<string>("Indentificador")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("BlocoId");

                    b.ToTable("Andares");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Bloco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Indentificador")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Blocos");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indentificador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Professores");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AndarId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorarioDisponivel")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AndarId");

                    b.HasIndex("CursoId");

                    b.ToTable("Salas");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Unidade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Localização")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Agendamento", b =>
                {
                    b.HasOne("ProvaTp3Teste.Model.Professor", "Professor")
                        .WithMany("Agendamentos")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvaTp3Teste.Model.Sala", "Sala")
                        .WithMany("Agendamentos")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Andar", b =>
                {
                    b.HasOne("ProvaTp3Teste.Model.Bloco", "Bloco")
                        .WithMany("Andares")
                        .HasForeignKey("BlocoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bloco");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Bloco", b =>
                {
                    b.HasOne("ProvaTp3Teste.Model.Unidade", "Unidade")
                        .WithMany("Blocos")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Professor", b =>
                {
                    b.HasOne("ProvaTp3Teste.Model.Curso", "Curso")
                        .WithMany("Professores")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Sala", b =>
                {
                    b.HasOne("ProvaTp3Teste.Model.Andar", "Andar")
                        .WithMany("Sala")
                        .HasForeignKey("AndarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvaTp3Teste.Model.Curso", "Curso")
                        .WithMany("Sala")
                        .HasForeignKey("CursoId");

                    b.Navigation("Andar");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Andar", b =>
                {
                    b.Navigation("Sala");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Bloco", b =>
                {
                    b.Navigation("Andares");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Curso", b =>
                {
                    b.Navigation("Professores");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Professor", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Sala", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("ProvaTp3Teste.Model.Unidade", b =>
                {
                    b.Navigation("Blocos");
                });
#pragma warning restore 612, 618
        }
    }
}
